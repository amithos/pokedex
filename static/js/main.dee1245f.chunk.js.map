{"version":3,"sources":["api/pokemon.ts","api/api.ts","_auxiliary.ts","components/Loader/Loader.tsx","components/SelectedPokemon/SelectedPokemon.tsx","components/PokemonCard/PokemonCard.tsx","components/PokemonsList/PokemonsList.tsx","App.tsx","index.tsx"],"names":["getPokemonById","id","endpoint","fetch","options","then","response","ok","json","Promise","reject","statusText","withACapital","word","toUpperCase","slice","Loader","className","getId","stringId","orderedKey","SelectedPokemon","selectedPokemonId","useState","selectedPokemon","setSetlectedPokemon","isLoading","setLoading","isLoaded","setLoaded","prevSelectedPokemonId","value","ref","useRef","useEffect","current","usePrevious","endLoading","pokemon","name","types","stats","weight","sprites","moves","tableData","type","find","slot","length","forEach","oldStat","stat","base_stat","console","log","newPokemon","imageSource","other","front_default","src","alt","map","dataKey","PokemonCard","onSelectPokemon","onSelectedPokemonId","classNames","onClick","PokemonList","onFilter","pokemons","setPokemons","loadPokemons","offset","requests","i","push","all","newPokemons","cards","sort","typeA","typeB","visiblePokemons","App","setSelectedPokemonId","filter","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dee1245f.chunk.js","sourcesContent":["import { request } from \"./api\";\n\nconst pokemon = 'pokemon/';\n\nexport const getPokemonById = (id: number): Promise<any> => {\n  return request(`${pokemon}${id}`)\n}\n","const BASE_URL = 'https://pokeapi.co/api/v2/';\n\nexport const request = ( endpoint: string, options?: object): Promise<any> => {  \n  \n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then(response => {\n    \n      if (!response.ok) {\n        return Promise.reject(response.statusText);\n      }\n      \n      return response.json();\n    }\n  )\n}\n","export const withACapital = (word: string) => {  \n  \n  if (typeof word !== 'string') {\n    return word;\n  }\n\n  return `${word[0].toUpperCase()}${word.slice(1)}`\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"loader\">\n    <div className=\"loader__content\"></div>\n\n  </div>\n);\n","import React, { ReactElement, useState, useEffect, useRef} from 'react';\n\nimport {iSelectedPokemon, iStat, iType, TableStatType} from '../../types/types';\nimport { SelectedCardType } from '../../types/SelectedCardType';\nimport { PokemonType } from '../../types/PokemonType';\nimport { SavedStatType } from '../../types/SelectedCardType';\n\nimport { getPokemonById } from '../../api/pokemon';\n\nimport './SelectedPokemon.scss';\nimport { withACapital } from '../../_auxiliary';\nimport { Loader } from '../Loader';\n\nfunction usePrevious(value: any) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst getId = (id: number): string => {\n  let stringId;\n  switch (true) {\n    case (id < 10) : stringId = `00${id}`;\n    break;\n\n    case (id < 100) : stringId = `0${id}`;\n    break;\n\n    default: stringId = id;\n  }\n\n  return `#${stringId}`\n}\n\nconst orderedKey = [\n  'type', 'attack', 'defense', 'hp', 'special-attack',\n  'special-defense', 'speed', 'weight', 'total moves'\n];\n\nexport const SelectedPokemon: React.FC<iSelectedPokemon> = ({\n  selectedPokemonId\n}): ReactElement => {\n\n  const [selectedPokemon, setSetlectedPokemon] = \n    useState<any>({});\n  const [isLoading, setLoading] = useState<any>(false);\n  const [isLoaded, setLoaded] = useState<any>(false);\n\n  const prevSelectedPokemonId = usePrevious(selectedPokemonId);\n\n  const startLoading = () => {\n    setLoading(true);\n    setLoaded(false);\n  }\n\n  const endLoading = () => {\n    setLoading(false);\n    setLoaded(true);\n  }\n\n  const loadPokemon = () => {\n\n    if (prevSelectedPokemonId === selectedPokemonId \n      || selectedPokemonId === 0) {\n      return;\n    }\n    \n    startLoading();\n\n    getPokemonById(selectedPokemonId)\n      .then((pokemon: PokemonType):void => {\n      \n        const {\n          name,\n          types,\n          stats,\n          weight,\n          id,\n          sprites,\n          moves,\n        } = pokemon;\n\n        const tableData: any = {\n          type: types.find((type: iType) => type.slot === 1)?.type.name,\n          'total moves': moves.length,\n          weight,\n        }\n        \n        stats.forEach((oldStat: iStat) => {\n          tableData[oldStat.stat.name] = oldStat.base_stat;\n\n          console.log(\n           withACapital(tableData[oldStat.stat.name])\n           );\n        });\n\n        \n        const newPokemon = {\n          imageSource: sprites.other['official-artwork'].front_default,\n          name,\n          id,\n          tableData,  \n        }\n        \n        setSetlectedPokemon(newPokemon);\n      })\n      .then(endLoading);\n  }\n\n  useEffect(loadPokemon, [selectedPokemonId]);\n\n  const {\n    imageSource,\n    name,\n    id,\n    tableData,\n  } = selectedPokemon;\n\n  \n  return (\n    <section className=\"selected-pokemon\">\n      \n      {!isLoading ? (<></>\n      ) : (\n        <div className=\"selected-pokemon__loader\">\n          <Loader/>\n        </div>\n      )}\n\n      { (!isLoaded) ? (\n        <></>\n      ) : (\n        <article className=\"selected-pokemon__card\">\n          <div className=\"selected-pokemon__content\">\n            <img\n              className=\"selected-pokemon__image\"\n              src={imageSource}\n              alt={name}\n            />\n            <table className=\"selected-pokemon__table\">\n              <caption className=\"selected-pokemon__name\">\n                {`${withACapital(name)} ${getId(id)}`}\n              </caption>\n\n              <tbody>\n                {orderedKey.map((dataKey: string) => {            \n\n                  return (\n                  <tr\n                    key={dataKey}\n                    className=\"selected-pokemon__row\"\n                  >\n                    <td className=\"selected-pokemon__datum\">\n                      {withACapital(dataKey)}\n                    </td>\n                    <td className=\"selected-pokemon__value\">\n                      {withACapital(tableData[dataKey])}\n                    </td>\n                  </tr>\n                )}\n                )}\n              </tbody>\n            </table>\n          </div>\n        </article>\n      )}\n    </section>\n  )\n}\n","import { ReactElement } from \"react\"\nimport classNames from 'classnames';\n\nimport { iPokemonCard } from \"../../types/PokemonCardType\" \nimport { iType } from \"../../types/types\"\n\nimport { withACapital } from '../../_auxiliary';\n\n\nimport './PokemonCard.scss';\n\nexport const PokemonCard: React.FC<iPokemonCard> = ({\n  pokemon, onSelectPokemon, onSelectedPokemonId,\n}): ReactElement => {\n  \n  const {\n    name,\n    id, \n    imageSource,\n    types\n  } = pokemon;\n\n  return (\n    <article\n      className={classNames(`pokemon-card--${types[0].type.name}`, {\n        \"pokemon-card\": true,\n        \"pokemon-card--selected\": id === onSelectedPokemonId,\n      })}\n      onClick={() => onSelectPokemon(id)}\n    >\n      <div className=\"pokemon-card__content\">\n        <img \n          className=\"pokemon-card__image\"\n          src={imageSource}\n          alt={name}\n        />\n        <p className=\"pokemon-card__name\">\n          {withACapital(name)}\n        </p>\n\n        <div className=\"pokemon-card__types\">\n          {types.map((type: iType) => (\n            <span\n              key={type.type.name} \n              className={`pokemon-card__type pokemon-card__type--${type.type.name}`}\n            >\n              {withACapital(type.type.name)}\n            </span>\n          ))}\n        </div>\n      </div>\n    </article>\n  ) \n}\n\n\n","import { ReactElement, useState, useEffect } from 'react';\n\nimport { iPokemonList } from '../../types/types';\nimport { PokemonType } from '../../types/PokemonType';\nimport { PokemonCardType } from '../../types/PokemonCardType';\n\nimport { getPokemonById } from '../../api/pokemon';\n\nimport { PokemonCard } from '../PokemonCard';\nimport { Loader } from '../Loader';\n\nimport './PokemonList.scss';\n\n\n\nexport const PokemonList: React.FC<iPokemonList> = ({\n  onSelectPokemon,\n  onFilter,\n  onSelectedPokemonId,\n\n}): ReactElement => {\n  \n  const [pokemons, setPokemons] = useState<PokemonCardType[]>([]);\n  const [isLoading, setLoading] = useState<Boolean>(false);\n\n  const startLoading = () => {\n    setLoading(true);\n  }\n\n  const endLoading = () => {\n    setLoading(false);\n  }\n  \n  const loadPokemons = (): void => {\n\n    startLoading();\n\n    const limit = 12;\n    let offset = pokemons.length + 1;\n    \n    const requests = [];\n\n    for (let i = 0; i < limit; i++) {\n      requests.push(getPokemonById(offset));\n      offset++;\n    }\n\n    Promise.all(requests)\n      .then((newPokemons: PokemonType[]) => {\n        const cards = newPokemons.map(\n          (pokemon: PokemonType): PokemonCardType => {\n            const {name, id, types} = pokemon;\n\n            return {\n              imageSource: pokemon.sprites.other['official-artwork'].front_default,\n              name,\n              types: types.sort((typeA, typeB) => typeA.slot - typeB.slot),\n              id,\n            }\n          }\n        );\n\n        return setPokemons([...pokemons, ...cards]);\n      })\n      .then(endLoading);\n  }\n           \n  let visiblePokemons = [...pokemons];\n\n  // if (onFilter) {\n  //   visiblePokemons = visiblePokemons.filter(onFilter);\n  // }\n\n  useEffect(loadPokemons, []);\n  \n  return (\n    <section className=\"pokemon-list\">\n      <div className=\"pokemon-list__content\">\n        \n        <ul className=\"pokemon-list__cards\">\n          {visiblePokemons.map((pokemon: PokemonCardType) => (\n            <li className=\"pokemon-list__item\" key={pokemon.id}>\n              <PokemonCard\n                pokemon={pokemon}\n                onSelectPokemon={onSelectPokemon}\n                onSelectedPokemonId={onSelectedPokemonId}\n              />\n            </li>\n          ))}\n        </ul>  \n              \n        <button\n          className=\"pokemon-list__button\"\n          onClick={loadPokemons}\n        >\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <p className=\"pokemon-list__button-text\">\n              Load More\n            </p>  \n          )}  \n        </button>\n          \n      </div>\n    </section>\n  );\n}\n","import React from 'react';\nimport { ReactElement, useState } from 'react';\n\nimport { SelectedPokemon } from './components/SelectedPokemon';\nimport { PokemonList } from './components/PokemonsList';\n\nimport { selectPokemonType } from './types/types';\n\nimport './App.scss';\n\nconst App = (): ReactElement => {\n\n  const [selectedPokemonId, setSelectedPokemonId] = useState<number>(0);\n  const [filter, setFilter] = useState<any | null>(null);\n\n  const selectPokemon: selectPokemonType = id => setSelectedPokemonId(id);\n  \n  return (\n    <div className=\"app\">\n\n      <header className=\"app__header\">\n        <div className=\"app__header-content\">\n          <h1 className=\"app__title\">\n            Pokedex\n          </h1>\n        </div>\n      </header>\n\n      <section className=\"app__selector\">\n        <div className=\"app__selector-content\">\n          <label htmlFor=\"type-selector\">Choose main type of pokemon</label>\n          <div\n            className=\"app__select\"\n            id=\"type-selector\"\n          >\n\n          </div>\n        </div>\n      </section>\n\n      <div className=\"app__content\">\n        <PokemonList\n          onSelectPokemon={selectPokemon}\n          onFilter={filter}\n          onSelectedPokemonId={selectedPokemonId}\n        />\n        <SelectedPokemon selectedPokemonId={selectedPokemonId}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}